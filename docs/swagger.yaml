basePath: /
definitions:
  models.Film:
    properties:
      box_office:
        type: integer
      budget:
        type: integer
      country:
        type: string
      description:
        type: string
      duration:
        type: integer
      id:
        type: string
      release_year:
        type: integer
      title:
        type: string
    type: object
  models.FilmInput:
    properties:
      box_office:
        type: integer
      budget:
        type: integer
      country:
        type: string
      description:
        type: string
      duration:
        type: integer
      release_year:
        type: integer
      title:
        type: string
    type: object
  models.ResponseError:
    properties:
      error:
        type: string
      status_code:
        type: integer
    type: object
  models.SignInInput:
    properties:
      email:
        example: words@mail.com
        type: string
      password:
        example: mypassword123
        maxLength: 16
        minLength: 8
        type: string
    required:
    - email
    - password
    type: object
  models.SignUpInput:
    properties:
      email:
        example: words@mail.com
        type: string
      password:
        example: mypassword123
        maxLength: 16
        minLength: 8
        type: string
      username:
        example: user123
        maxLength: 20
        minLength: 3
        type: string
    required:
    - email
    - password
    - username
    type: object
  models.User:
    properties:
      email:
        type: string
      id:
        type: string
      password:
        type: string
      username:
        type: string
    type: object
info:
  contact:
    email: amir.kurmanbekov@gmail.com
  description: This is a sample server Films data  server.
  title: absoluteCinema
  version: "1.5"
paths:
  /auth/sign-in:
    post:
      consumes:
      - application/json
      description: This endpoint allows users to authenticate and receive an access
        token.
      parameters:
      - description: User credentials
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.SignInInput'
      produces:
      - application/json
      responses:
        "200":
          description: Authentication successful, returns access token
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Invalid request body
          schema:
            $ref: '#/definitions/models.ResponseError'
        "401":
          description: Invalid credentials
          schema:
            $ref: '#/definitions/models.ResponseError'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/models.ResponseError'
        "409":
          description: Username already taken
          schema:
            $ref: '#/definitions/models.ResponseError'
        "422":
          description: Validation error
          schema:
            $ref: '#/definitions/models.ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ResponseError'
      summary: Sign in a user
      tags:
      - Auth
  /auth/sign-up:
    post:
      consumes:
      - application/json
      description: This endpoint is responsible for registering a new user.
      parameters:
      - description: User data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.SignUpInput'
      produces:
      - application/json
      responses:
        "201":
          description: User created successfully
          schema:
            $ref: '#/definitions/models.User'
        "400":
          description: Invalid request body
          schema:
            $ref: '#/definitions/models.ResponseError'
        "422":
          description: Validation error
          schema:
            $ref: '#/definitions/models.ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ResponseError'
      summary: Sign up a new user
      tags:
      - Auth
  /films/:
    get:
      description: Returns a list of all films in the database.
      produces:
      - application/json
      responses:
        "200":
          description: Successful response
          schema:
            items:
              $ref: '#/definitions/models.Film'
            type: array
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Get all films
      tags:
      - Films
    post:
      consumes:
      - application/json
      description: This endpoint adds a new film based on the provided JSON data (excluding
        ID).
      parameters:
      - description: Film data
        in: body
        name: film
        required: true
        schema:
          $ref: '#/definitions/models.FilmInput'
      produces:
      - application/json
      responses:
        "201":
          description: Created successfully
          schema:
            $ref: '#/definitions/models.Film'
        "400":
          description: Invalid request body
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Add a new film
      tags:
      - Films
  /films/{id}:
    delete:
      description: Removes a film from the database based on the provided ID.
      parameters:
      - description: Film ID
        in: path
        name: id
        required: true
        type: string
      responses:
        "204":
          description: Film deleted successfully
        "400":
          description: 'Bad Request: ID is required'
          schema:
            $ref: '#/definitions/models.ResponseError'
        "404":
          description: Film not found
          schema:
            $ref: '#/definitions/models.ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ResponseError'
      security:
      - BearerAuth: []
      summary: Delete a film by ID
      tags:
      - Films
    get:
      description: Returns a single film based on the provided ID.
      parameters:
      - description: Film ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Film found
          schema:
            $ref: '#/definitions/models.Film'
        "404":
          description: Film not found
          schema:
            $ref: '#/definitions/models.ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ResponseError'
      security:
      - BearerAuth: []
      summary: Get a film by ID
      tags:
      - Films
    patch:
      consumes:
      - application/json
      description: Updates an existing film in the database based on the provided
        ID.
      parameters:
      - description: Film ID
        in: path
        name: id
        required: true
        type: string
      - description: Updated film data
        in: body
        name: film
        required: true
        schema:
          $ref: '#/definitions/models.FilmInput'
      responses:
        "204":
          description: Film updated successfully
        "400":
          description: 'Bad Request: invalid JSON'
          schema:
            $ref: '#/definitions/models.ResponseError'
        "404":
          description: Film not found
          schema:
            $ref: '#/definitions/models.ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ResponseError'
      security:
      - BearerAuth: []
      summary: Update a film by ID
      tags:
      - Films
securityDefinitions:
  BearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
